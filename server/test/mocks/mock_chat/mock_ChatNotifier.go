// Code generated by mockery v2.42.3. DO NOT EDIT.

package mock_chat

import (
	context "context"

	model "github.com/dvid-messanger/internal/core/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// MockChatNotifier is an autogenerated mock type for the ChatNotifier type
type MockChatNotifier struct {
	mock.Mock
}

type MockChatNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChatNotifier) EXPECT() *MockChatNotifier_Expecter {
	return &MockChatNotifier_Expecter{mock: &_m.Mock}
}

// NewChat provides a mock function with given fields: ctx, _a1
func (_m *MockChatNotifier) NewChat(ctx context.Context, _a1 *model.Chat) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for NewChat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Chat) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChatNotifier_NewChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewChat'
type MockChatNotifier_NewChat_Call struct {
	*mock.Call
}

// NewChat is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *model.Chat
func (_e *MockChatNotifier_Expecter) NewChat(ctx interface{}, _a1 interface{}) *MockChatNotifier_NewChat_Call {
	return &MockChatNotifier_NewChat_Call{Call: _e.mock.On("NewChat", ctx, _a1)}
}

func (_c *MockChatNotifier_NewChat_Call) Run(run func(ctx context.Context, _a1 *model.Chat)) *MockChatNotifier_NewChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Chat))
	})
	return _c
}

func (_c *MockChatNotifier_NewChat_Call) Return(_a0 error) *MockChatNotifier_NewChat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChatNotifier_NewChat_Call) RunAndReturn(run func(context.Context, *model.Chat) error) *MockChatNotifier_NewChat_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessage provides a mock function with given fields: ctx, message
func (_m *MockChatNotifier) NewMessage(ctx context.Context, message *model.ChatMessage) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for NewMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.ChatMessage) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChatNotifier_NewMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewMessage'
type MockChatNotifier_NewMessage_Call struct {
	*mock.Call
}

// NewMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - message *model.ChatMessage
func (_e *MockChatNotifier_Expecter) NewMessage(ctx interface{}, message interface{}) *MockChatNotifier_NewMessage_Call {
	return &MockChatNotifier_NewMessage_Call{Call: _e.mock.On("NewMessage", ctx, message)}
}

func (_c *MockChatNotifier_NewMessage_Call) Run(run func(ctx context.Context, message *model.ChatMessage)) *MockChatNotifier_NewMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.ChatMessage))
	})
	return _c
}

func (_c *MockChatNotifier_NewMessage_Call) Return(_a0 error) *MockChatNotifier_NewMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChatNotifier_NewMessage_Call) RunAndReturn(run func(context.Context, *model.ChatMessage) error) *MockChatNotifier_NewMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChatNotifier creates a new instance of MockChatNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChatNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChatNotifier {
	mock := &MockChatNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
