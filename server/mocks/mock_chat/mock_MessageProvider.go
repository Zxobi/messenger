// Code generated by mockery v2.42.3. DO NOT EDIT.

package mock_chat

import (
	context "context"

	model "github.com/dvid-messanger/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// MockMessageProvider is an autogenerated mock type for the MessageProvider type
type MockMessageProvider struct {
	mock.Mock
}

type MockMessageProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageProvider) EXPECT() *MockMessageProvider_Expecter {
	return &MockMessageProvider_Expecter{mock: &_m.Mock}
}

// Messages provides a mock function with given fields: ctx, cid
func (_m *MockMessageProvider) Messages(ctx context.Context, cid []byte) ([]model.ChatMessage, error) {
	ret := _m.Called(ctx, cid)

	if len(ret) == 0 {
		panic("no return value specified for Messages")
	}

	var r0 []model.ChatMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) ([]model.ChatMessage, error)); ok {
		return rf(ctx, cid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) []model.ChatMessage); ok {
		r0 = rf(ctx, cid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ChatMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, cid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMessageProvider_Messages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Messages'
type MockMessageProvider_Messages_Call struct {
	*mock.Call
}

// Messages is a helper method to define mock.On call
//   - ctx context.Context
//   - cid []byte
func (_e *MockMessageProvider_Expecter) Messages(ctx interface{}, cid interface{}) *MockMessageProvider_Messages_Call {
	return &MockMessageProvider_Messages_Call{Call: _e.mock.On("Messages", ctx, cid)}
}

func (_c *MockMessageProvider_Messages_Call) Run(run func(ctx context.Context, cid []byte)) *MockMessageProvider_Messages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *MockMessageProvider_Messages_Call) Return(_a0 []model.ChatMessage, _a1 error) *MockMessageProvider_Messages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMessageProvider_Messages_Call) RunAndReturn(run func(context.Context, []byte) ([]model.ChatMessage, error)) *MockMessageProvider_Messages_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessageProvider creates a new instance of MockMessageProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageProvider {
	mock := &MockMessageProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
